### Algorithme de resolution d'une partie Hashiwokakero :

#### Partie recursive ( à re-travailler ) :

game solveur_recursif(game g, int num_noeud):
  si num_noeud == nb_nodes(g) alors
    si game_over(g) alors
      retourner game_copy(g);
    sinon
      retourner NULL;
    fin si;
  fin si;
  pour chaque configuration conf de ponts autour d'un noeud
    si la configuration conf est valide pour le noeud num_noeud de g alors
      game g2 = le jeu g auquel on a ajouté la configuration conf au noeud num_noeud;
      game solution = solveur_recursif(g2, num_noeud+1);
      si solution != NULL alors
        retourner solution;
      fin si;
    fin si;
  fin pour;
  retourner NULL;
fin fonction;


#### Partie optimisation :

En gros, si le degré requis est égal au degré actuel + somme des ponts possibles alors on ajoute les ponts et on complète le noeud.

#### Partie basic_bridges :

Si un noeud doit avoir au minimum un pont avec chacun de ses voisins alors on les places.
Exemple : un noeud de degré 5 qui possède 3 voisins à au moins une connexion avec chacun de ses voisins.



